//! This file aims to make a better experience for end users by mapping proto::* classes into
//! a user friendly Rpc{Request, Response}::* enum and have better documentation

use paste::paste;

use crate::proto::StopSession;
use crate::proto::app::{AppStateResponse, GetErrorResponse, LockStatusResponse};
use crate::proto::desktop::{
    IsLockedRequest, Status, StatusSubscribeRequest, StatusUnsubscribeRequest, UnlockRequest,
};
use crate::proto::gpio::{
    GetOtgMode, GetOtgModeResponse, GetPinMode, GetPinModeResponse, ReadPin, ReadPinResponse,
    SetInputPull, SetOtgMode, SetPinMode, WritePin,
};
use crate::proto::gui::{
    ScreenFrame, SendInputEventRequest, StartScreenStreamRequest, StartVirtualDisplayRequest,
    StopScreenStreamRequest, StopVirtualDisplayRequest,
};
use crate::proto::property::{GetRequest, GetResponse};
use crate::proto::storage::{
    InfoResponse, ListResponse, Md5sumResponse, ReadResponse, StatResponse, TimestampResponse,
};
use crate::proto::system::{
    DeviceInfoRequest, DeviceInfoResponse, FactoryResetRequest, GetDateTimeResponse, PingRequest,
    PowerInfoResponse, ProtobufVersionResponse, RebootRequest, SetDateTimeRequest, UpdateResponse,
};
use crate::proto::{
    self, CommandStatus,
    app::{
        AppButtonPressReleaseRequest, AppButtonPressRequest, AppButtonReleaseRequest,
        AppExitRequest, AppLoadFileRequest, DataExchangeRequest, GetErrorRequest,
        LockStatusRequest, StartRequest,
    },
    storage::{
        BackupCreateRequest, BackupRestoreRequest, DeleteRequest, InfoRequest, ListRequest,
        Md5sumRequest, MkdirRequest, ReadRequest, RenameRequest, StatRequest, TarExtractRequest,
        TimestampRequest, WriteRequest,
    },
    system::{DateTime, UpdateRequest, reboot_request::RebootMode},
};

// Generated by ChatGPT idk how to do macros
macro_rules! define_into_impl {
    ($enum_name:ident $variant:ident $typ:ty) => {
        paste! {
            impl $enum_name {
               #[doc = stringify!(Reads the internal $typ data from a $enum_name::$variant)]
               #[doc = r" Panics if the variant is not the same as the data type requested"]
               pub fn [<into_ $variant:lower>](self) -> $typ {
                    match self {
                        $enum_name::$variant(x) => x,
                        _ => panic!(concat!(
                            "called `into_",
                            stringify!($variant),
                            "` on a non-",
                            stringify!($variant),
                            " value"
                        )),
                    }
                }
            }
        }
    };
    ($enum_name:ident $variant:ident) => {};
}

macro_rules! define_into_enum {
     (
        $(#[$enum_meta:meta])*
        $vis:vis enum $enum_name:ident {
            $(
                $(#[$variant_meta:meta])*
                $variant:ident $( ( $typ:ty ) )?
            ),* $(,)?
        }
    ) => {
        $(#[$enum_meta])*
        $vis enum $enum_name {
            $(
                $(#[$variant_meta])*
                #[doc = stringify!($enum_name::$variant)]
                $variant $( ( $typ ) )?,
            )*
        }

        $(
            define_into_impl!($enum_name $variant $( $typ)?);
        )*
    };
}

// bootleg proc-macros but i dont wanna make any
define_into_enum! {
    /// Wrapper around proto::Main tailored for requests. Can be turned into a proto::Main by
    /// RcpRequest::into_rpc(self)
#[derive(Debug)]
pub enum RpcRequest {
    StopSession,
    Ping(Vec<u8>),
    Reboot(RebootMode),
    SystemDeviceInfo,
    SystemFactoryReset,
    SystemGetDatetime,
    SystemSetDatetime(DateTime),
    SystemPlayAudiovisualAlert,
    SystemProtobufVersion,
    SystemUpdate(UpdateRequest),
    SystemPowerInfo,
    StorageInfo(InfoRequest),
    StorageTimestamp(TimestampRequest),
    StorageStat(StatRequest),
    StorageList(ListRequest),
    StorageRead(ReadRequest),
    StorageWrite(WriteRequest),
    StorageDelete(DeleteRequest),
    StorageMkdir(MkdirRequest),
    StorageMd5sumRequest(Md5sumRequest),
    StorageRenameRequest(RenameRequest),
    StorageBackupCreateRequest(BackupCreateRequest),
    StorageBackupRestoreRequest(BackupRestoreRequest),
    StorageTarExtractRequest(TarExtractRequest),
    AppStartRequest(StartRequest),
    AppLockStatusRequest(LockStatusRequest),
    AppExitRequest(AppExitRequest),
    AppLoadFileRequest(AppLoadFileRequest),
    AppButtonPressRequest(AppButtonPressRequest),
    AppButtonReleaseRequest(AppButtonReleaseRequest),
    AppButtonPressReleaseRequest(AppButtonPressReleaseRequest),
    AppGetErrorRequest(GetErrorRequest),
    AppDataExchangeRequest(DataExchangeRequest),
    GuiStartScreenStreamRequest(StartScreenStreamRequest),
    GuiStopScreenStreamRequest(StopScreenStreamRequest),
    GuiSendInputEventRequest(SendInputEventRequest),
    GuiStartVirtualDisplayRequest(StartVirtualDisplayRequest),
    GuiStopVirtualDisplayRequest(StopVirtualDisplayRequest),
    GpioSetPinMode(SetPinMode),
    GpioSetInputPull(SetInputPull),
    GpioGetPinMode(GetPinMode),
    GpioReadPin(ReadPin),
    GpioWritePin(WritePin),
    GpioGetOtgMode(GetOtgMode),
    GpioSetOtgMode(SetOtgMode),
    PropertyGetRequest(GetRequest),
    DesktopIsLockedRequest(IsLockedRequest),
    DesktopUnlockRequest(UnlockRequest),
    DesktopStatusSubscribeRequest(StatusSubscribeRequest),
    DesktopStatusUnsubscribeRequest(StatusUnsubscribeRequest),
}
}

define_into_enum! {
    /// Wrapper around proto::Main tailored for responses. Can be made from a proto::Main by
    /// Into/From
#[derive(Debug)]
pub enum RpcResponse {
    Empty,
    Ping(Vec<u8>),
    SystemDeviceInfoResponse(DeviceInfoResponse),
    SystemGetDatetimeResponse(GetDateTimeResponse),
    SystemProtobufVersionResponse(ProtobufVersionResponse),
    SystemUpdateResponse(UpdateResponse),
    SystemPowerInfoResponse(PowerInfoResponse),
    StorageInfoResponse(InfoResponse),
    StorageTimestampResponse(TimestampResponse),
    StorageStatResponse(StatResponse),
    StorageListResponse(ListResponse),
    StorageReadResponse(ReadResponse),
    StorageMd5sumResponse(Md5sumResponse),
    AppLockStatusResponse(LockStatusResponse),
    AppGetErrorResponse(GetErrorResponse),
    GuiScreenFrame(ScreenFrame),
    GpioGetPinModeResponse(GetPinModeResponse),
    GpioReadPinResponse(ReadPinResponse),
    GpioGetOtgModeResponse(GetOtgModeResponse),
    AppStateResponse(AppStateResponse),
    PropertyGetResponse(GetResponse),
    DesktopStatus(Status),
}
}

impl RpcRequest {
    /// Creates a proto::Main from an RpcRequest
    ///
    /// Useful for actually sending the requests, as this is what the API expects. Does not error.
    pub fn into_rpc(self, command_id: u32, has_next: bool) -> proto::Main {
        use proto::main::Content;

        proto::Main {
            command_id,
            command_status: CommandStatus::Ok.into(),
            has_next,

            // TODO: Implement user-friendly methods for all of these
            content: Some(match self {
                RpcRequest::StopSession => Content::StopSession(StopSession {}),
                RpcRequest::Ping(data) => Content::SystemPingRequest(PingRequest { data }),
                RpcRequest::Reboot(reboot_mode) => Content::SystemRebootRequest(RebootRequest {
                    mode: reboot_mode.into(),
                }),

                RpcRequest::SystemDeviceInfo => {
                    Content::SystemDeviceInfoRequest(DeviceInfoRequest {})
                }
                RpcRequest::SystemFactoryReset => {
                    Content::SystemFactoryResetRequest(FactoryResetRequest {})
                }
                RpcRequest::SystemGetDatetime => {
                    Content::SystemGetDatetimeRequest(crate::proto::system::GetDateTimeRequest {})
                } // ← import GetDateTimeRequest
                RpcRequest::SystemSetDatetime(date_time) => {
                    Content::SystemSetDatetimeRequest(SetDateTimeRequest {
                        datetime: Some(date_time),
                    })
                }
                RpcRequest::SystemPlayAudiovisualAlert => {
                    Content::SystemPlayAudiovisualAlertRequest(
                        crate::proto::system::PlayAudiovisualAlertRequest {},
                    )
                }
                RpcRequest::SystemProtobufVersion => Content::SystemProtobufVersionRequest(
                    crate::proto::system::ProtobufVersionRequest {},
                ),
                RpcRequest::SystemUpdate(update_req) => {
                    Content::SystemUpdateRequest(UpdateRequest { ..update_req })
                }
                RpcRequest::SystemPowerInfo => {
                    Content::SystemPowerInfoRequest(crate::proto::system::PowerInfoRequest {})
                }
                RpcRequest::StorageInfo(req) => Content::StorageInfoRequest(req),
                RpcRequest::StorageTimestamp(req) => Content::StorageTimestampRequest(req),
                RpcRequest::StorageStat(req) => Content::StorageStatRequest(req),
                RpcRequest::StorageList(req) => Content::StorageListRequest(req),
                RpcRequest::StorageRead(req) => Content::StorageReadRequest(req),
                RpcRequest::StorageWrite(req) => Content::StorageWriteRequest(req),
                RpcRequest::StorageDelete(req) => Content::StorageDeleteRequest(req),
                RpcRequest::StorageMkdir(req) => Content::StorageMkdirRequest(req),
                RpcRequest::StorageMd5sumRequest(req) => Content::StorageMd5sumRequest(req),
                RpcRequest::StorageRenameRequest(req) => Content::StorageRenameRequest(req),
                RpcRequest::StorageBackupCreateRequest(req) => {
                    Content::StorageBackupCreateRequest(req)
                }
                RpcRequest::StorageBackupRestoreRequest(req) => {
                    Content::StorageBackupRestoreRequest(req)
                }
                RpcRequest::StorageTarExtractRequest(req) => Content::StorageTarExtractRequest(req),

                RpcRequest::AppStartRequest(req) => Content::AppStartRequest(req),
                RpcRequest::AppLockStatusRequest(req) => Content::AppLockStatusRequest(req),
                RpcRequest::AppExitRequest(req) => Content::AppExitRequest(req),
                RpcRequest::AppLoadFileRequest(req) => Content::AppLoadFileRequest(req),
                RpcRequest::AppButtonPressRequest(req) => Content::AppButtonPressRequest(req),
                RpcRequest::AppButtonReleaseRequest(req) => Content::AppButtonReleaseRequest(req),
                RpcRequest::AppButtonPressReleaseRequest(req) => {
                    Content::AppButtonPressReleaseRequest(req)
                }
                RpcRequest::AppDataExchangeRequest(req) => Content::AppDataExchangeRequest(req),
                RpcRequest::AppGetErrorRequest(req) => Content::AppGetErrorRequest(req),

                RpcRequest::GuiStartScreenStreamRequest(req) => {
                    Content::GuiStartScreenStreamRequest(req)
                }
                RpcRequest::GuiStopScreenStreamRequest(req) => {
                    Content::GuiStopScreenStreamRequest(req)
                }
                RpcRequest::GuiSendInputEventRequest(req) => Content::GuiSendInputEventRequest(req),
                RpcRequest::GuiStartVirtualDisplayRequest(req) => {
                    Content::GuiStartVirtualDisplayRequest(req)
                }
                RpcRequest::GuiStopVirtualDisplayRequest(req) => {
                    Content::GuiStopVirtualDisplayRequest(req)
                }

                RpcRequest::GpioSetPinMode(req) => Content::GpioSetPinMode(req),
                RpcRequest::GpioSetInputPull(req) => Content::GpioSetInputPull(req),
                RpcRequest::GpioGetPinMode(req) => Content::GpioGetPinMode(req),
                RpcRequest::GpioReadPin(req) => Content::GpioReadPin(req),
                RpcRequest::GpioWritePin(req) => Content::GpioWritePin(req),
                RpcRequest::GpioGetOtgMode(req) => Content::GpioGetOtgMode(req),
                RpcRequest::GpioSetOtgMode(req) => Content::GpioSetOtgMode(req),

                RpcRequest::PropertyGetRequest(req) => Content::PropertyGetRequest(req),
                RpcRequest::DesktopIsLockedRequest(req) => Content::DesktopIsLockedRequest(req),
                RpcRequest::DesktopUnlockRequest(req) => Content::DesktopUnlockRequest(req),
                RpcRequest::DesktopStatusSubscribeRequest(req) => {
                    Content::DesktopStatusSubscribeRequest(req)
                }
                RpcRequest::DesktopStatusUnsubscribeRequest(req) => {
                    Content::DesktopStatusUnsubscribeRequest(req)
                }
            }),
        }
    }
}

impl From<proto::Main> for RpcResponse {
    fn from(val: proto::Main) -> Self {
        use proto::main::Content::*;
        let content = val.content.unwrap();

        match content {
            Empty(_) => RpcResponse::Empty,
            SystemPingResponse(r) => RpcResponse::Ping(r.data),
            SystemDeviceInfoResponse(r) => RpcResponse::SystemDeviceInfoResponse(r),
            SystemGetDatetimeResponse(r) => RpcResponse::SystemGetDatetimeResponse(r),
            SystemProtobufVersionResponse(r) => RpcResponse::SystemProtobufVersionResponse(r),
            SystemUpdateResponse(r) => RpcResponse::SystemUpdateResponse(r),
            SystemPowerInfoResponse(r) => RpcResponse::SystemPowerInfoResponse(r),
            StorageInfoResponse(r) => RpcResponse::StorageInfoResponse(r),
            StorageTimestampResponse(r) => RpcResponse::StorageTimestampResponse(r),
            StorageStatResponse(r) => RpcResponse::StorageStatResponse(r),
            StorageListResponse(r) => RpcResponse::StorageListResponse(r),
            StorageReadResponse(r) => RpcResponse::StorageReadResponse(r),
            StorageMd5sumResponse(r) => RpcResponse::StorageMd5sumResponse(r),
            AppLockStatusResponse(r) => RpcResponse::AppLockStatusResponse(r),
            AppGetErrorResponse(r) => RpcResponse::AppGetErrorResponse(r),
            GuiScreenFrame(r) => RpcResponse::GuiScreenFrame(r),
            GpioGetPinModeResponse(r) => RpcResponse::GpioGetPinModeResponse(r),
            GpioReadPinResponse(r) => RpcResponse::GpioReadPinResponse(r),
            GpioGetOtgModeResponse(r) => RpcResponse::GpioGetOtgModeResponse(r),
            AppStateResponse(r) => RpcResponse::AppStateResponse(r),
            PropertyGetResponse(r) => RpcResponse::PropertyGetResponse(r),
            DesktopStatus(r) => RpcResponse::DesktopStatus(r),

            _ => panic!("Cannot convert {:?} into RpcResponse", content),
        }
    }
}
